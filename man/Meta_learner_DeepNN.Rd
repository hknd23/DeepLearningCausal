% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/neural_meta_learners.R
\name{Meta_learner_DeepNN}
\alias{Meta_learner_DeepNN}
\title{Meta_learner_DeepNN}
\usage{
Meta_learner_DeepNN(
  data,
  cov.formula,
  treat.var,
  meta.learner.type,
  stepmax = 1e+05,
  nfolds = 5,
  algorithm = "rprop+",
  hidden.layer = c(4, 2),
  linear.output = FALSE
)
}
\arguments{
\item{data}{\code{data.frame} object of data.}

\item{cov.formula}{formula description of the model y ~ x(list of covariates).}

\item{treat.var}{string for the name of treatment variable.}

\item{meta.learner.type}{string specifying is the S-learner and
\code{"T.Learner"} for the T-learner model.}

\item{stepmax}{maximum number of steps for training model.}

\item{nfolds}{number of folds for cross-validation. Currently supports up to
5 folds.}

\item{algorithm}{a string for the algorithm for the neural network.
Default set to \verb{rprop+}, the Resilient back propagation (Rprop) with weight
backtracking algorithm for training neural networks.}

\item{hidden.layer}{vector of integers specifying layers and number of neurons.}

\item{linear.output}{logical specifying regression (TRUE)
or classification (FALSE) model.}
}
\value{
vector of CATEs estimated by the meta learners for each observation.
}
\description{
\code{Meta_learner_DeepNN} implements the S-learner and T-learner for estimating
CATE using Deep Neural Networks. The Resilient back propagation (Rprop)
algorithm is used for training neural networks.
}
\examples{
# load dataset
data(IND_exp_data)
# estimate CATEs with S Learner
\donttest{
slearner_nn <- Meta_learner_DeepNN(cov.formula = outcome ~ age +
                                 income  +
                                 employed  + job_worry,
                                 data = IND_exp_data,
                                 treat.var = "trt1",
                                 meta.learner.type = "S.Learner",
                                 stepmax=1e+9,
                                 nfolds=5,
                                 algorithm = "rprop+",
                                 hidden.layer = c(4,2),
                                 linear.output = FALSE)
# estimate CATEs with T Learner
tlearner_nn <- Meta_learner_DeepNN(cov.formula = outcome ~ age +
                                  income  +
                                  employed  + job_worry,
                                data = expdata,
                                treat.var = "trt1",
                                meta.learner.type = "T.Learner",
                                stepmax = 1e+9,
                                nfolds = 5,
                                algorithm = "rprop+",
                                hidden.layer = c(2,1),
                                linear.output = FALSE)
                                }
\dontrun{
#Model may not converge with low stepmax
slearner_nn <- Meta_learner_DeepNN(cov.formula = outcome ~ age +
                                  income  +
                                  employed  + job_worry,
                                data = expdata,
                               treat.var = "trt1",
                                meta.learner.type="S.Learner",
                                stepmax=1e+4,
                                nfolds=5,
                                algorithm = "rprop+",
                                hidden.layer=c(4,2),
                                linear.output = FALSE)

#Other learners not supported
slearner_nn <- Meta_learner_DeepNN(cov.formula = outcome ~ age +
                                 income  +
                                 employed  + job_worry,
                                 data = expdata,
                                 treat.var = "trt1",
                                 meta.learner.type="R.Learner",
                                 stepmax=1e+4,
                                 nfolds=5,
                                 algorithm = "rprop+",
                                 hidden.layer=c(4,2),
                                 linear.output = FALSE)
                                }
}
