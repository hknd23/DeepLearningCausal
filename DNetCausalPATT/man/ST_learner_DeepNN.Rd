% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/neural_meta_learners.R
\name{ST_learner_DeepNN}
\alias{ST_learner_DeepNN}
\title{S_T-learner DeepNN}
\usage{
ST_learner_DeepNN(
  data,
  cov.formula,
  treat.var,
  meta.learner.type,
  stepmax = 1e+05,
  nfolds = 5,
  algorithm = "rprop+",
  hidden.layer = c(4, 2),
  linear.output = FALSE
)
}
\arguments{
\item{data}{\code{data.frame} object of data.}

\item{cov.formula}{formula description of the model y ~ x(list of covariates).}

\item{treat.var}{string for the name of treatment variable.}

\item{meta.learner.type}{string specifying is the S-learner and
\code{"T.Learner"} for the T-learner model.}

\item{stepmax}{maximum number of steps for training model.}

\item{nfolds}{number of folds for cross-validation. Currently supports up to
5 folds.}

\item{algorithm}{a string for the algorithm for the neural network.
Default set to \verb{rprop+}, the Resilient back propagation (Rprop) with weight
backtracking algorithm for training neural networks.}

\item{hidden.layer}{vector of integers specifying layers and number of neurons.}

\item{linear.output}{logical specifying regression (TRUE)
or classification (FALSE) model.}
}
\value{
vector of CATEs estimated by the meta learners for each observation.
}
\description{
\code{ST_learner_DeepNN} implements the S-learner and T-learner for estimating
CATE using Deep Neural Networks. The Resilient back propagation (Rprop)
algorithm is used for training neural networks.
}
